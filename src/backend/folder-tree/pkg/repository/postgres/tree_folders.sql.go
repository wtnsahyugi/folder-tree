// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tree_folders.sql

package repository

import (
	"context"
	"database/sql"
)

const listAllFolders = `-- name: ListAllFolders :many
WITH RECURSIVE folder_hierarchy AS (
    SELECT id, name, parent_id, is_folder, 1 AS depth
    FROM tree_folders WHERE parent_id IS NULL
    UNION ALL
    SELECT f.id, f.name, f.parent_id,f.is_folder, fh.depth + 1
    FROM tree_folders f
    INNER JOIN folder_hierarchy fh ON f.parent_id = fh.id
)
SELECT id, name, parent_id, depth, is_folder FROM folder_hierarchy order by depth
`

type ListAllFoldersRow struct {
	ID       int32         `db:"id"`
	Name     string        `db:"name"`
	ParentID sql.NullInt32 `db:"parent_id"`
	Depth    int32         `db:"depth"`
	IsFolder sql.NullBool  `db:"is_folder"`
}

func (q *Queries) ListAllFolders(ctx context.Context) ([]ListAllFoldersRow, error) {
	rows, err := q.db.Query(ctx, listAllFolders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllFoldersRow
	for rows.Next() {
		var i ListAllFoldersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.Depth,
			&i.IsFolder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFolderTreeById = `-- name: ListFolderTreeById :many
WITH RECURSIVE folder_hierarchy AS (
    SELECT id, name, parent_id, is_folder, 1 AS depth
    FROM tree_folders
    WHERE (CASE WHEN $1::bigint = 0 THEN parent_id IS NULL ELSE id = $1::bigint END)
    UNION ALL
    SELECT f.id, f.name, f.parent_id,f.is_folder, fh.depth + 1
    FROM tree_folders f
    INNER JOIN folder_hierarchy fh ON f.parent_id = fh.id
    WHERE fh.depth < $2::int
)
SELECT id, name, parent_id, depth, is_folder FROM folder_hierarchy order by depth
`

type ListFolderTreeByIdParams struct {
	ID    int64 `db:"id"`
	Depth int32 `db:"depth"`
}

type ListFolderTreeByIdRow struct {
	ID       int32         `db:"id"`
	Name     string        `db:"name"`
	ParentID sql.NullInt32 `db:"parent_id"`
	Depth    int32         `db:"depth"`
	IsFolder sql.NullBool  `db:"is_folder"`
}

func (q *Queries) ListFolderTreeById(ctx context.Context, arg ListFolderTreeByIdParams) ([]ListFolderTreeByIdRow, error) {
	rows, err := q.db.Query(ctx, listFolderTreeById, arg.ID, arg.Depth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFolderTreeByIdRow
	for rows.Next() {
		var i ListFolderTreeByIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.Depth,
			&i.IsFolder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
